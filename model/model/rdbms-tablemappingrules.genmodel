<?xml version="1.0" encoding="UTF-8"?>
<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
   xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel" modelDirectory="/hu.blackbelt.judo.meta.rdbms.model/src-gen" modelPluginID="hu.blackbelt.judo.meta.rdbms.model"
   modelName="RdbmsTableMappingRules" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
    importerID="org.eclipse.emf.importer.ecore" featureDelegation="Dynamic" complianceLevel="8.0"
    copyrightFields="false" operationReflection="true" importOrganizing="true" oSGiCompatible="true">
  <foreignModel>rdbms-tablemappingrules.ecore</foreignModel>
  <genPackages prefix="RdbmsRules" basePackage="hu.blackbelt.judo.meta" resource="XMI"
      disposableProviderFactory="true" extensibleProviderFactory="true" childCreationExtenders="true"
      fileExtensions="rdbms-tabslemappingrules" ecorePackage="rdbms-tablemappingrules.ecore#/">
    <genClasses ecoreClass="rdbms-tablemappingrules.ecore#//Rules">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference rdbms-tablemappingrules.ecore#//Rules/rules"/>
      <genOperations ecoreOperation="rdbms-tablemappingrules.ecore#//Rules/getRuleFromReference"
          body="        java.util.Optional&lt;org.eclipse.emf.ecore.EReference> opposite = &#xA;                java.util.Optional.ofNullable(reference.getEOpposite());&#xA;&#xA;        final int lower;&#xA;        if (reference.getLowerBound() > 1) {&#xA;            lower = 1;&#xA;        } else {&#xA;            lower = reference.getLowerBound();&#xA;        }&#xA;&#xA;        final int upper;&#xA;        if (reference.getUpperBound() > 1) {&#xA;            upper = -1;&#xA;        } else {&#xA;            upper = reference.getUpperBound();&#xA;        }&#xA;&#xA;        final Integer oppositeLower;&#xA;        final Integer oppositeUpper;&#xA;        final boolean first = !opposite.isPresent() || reference.getName().compareTo(opposite.get().getName()) &lt; 0;&#xA;&#xA;        if (opposite.isPresent()) {&#xA;            if (opposite.get().getLowerBound() > 1) {&#xA;                oppositeLower = 1;&#xA;            } else {&#xA;                oppositeLower = opposite.get().getLowerBound();&#xA;            }&#xA;            if (opposite.get().getUpperBound() > 1) {&#xA;                oppositeUpper = -1;&#xA;            } else {&#xA;                oppositeUpper = opposite.get().getUpperBound();&#xA;            }&#xA;        } else {&#xA;            oppositeLower = null;&#xA;            oppositeUpper = null;&#xA;        }&#xA;&#xA;        Iterable&lt;org.eclipse.emf.ecore.EObject> iterable = () -> this.eAllContents();&#xA;        java.util.stream.Stream&lt;org.eclipse.emf.ecore.EObject> stream = &#xA;                java.util.stream.StreamSupport.stream(iterable.spliterator(), false);&#xA;        &#xA;        java.util.Optional&lt;hu.blackbelt.judo.meta.rdbmsRules.Rule> ret = stream&#xA;                .filter(o -> o instanceof hu.blackbelt.judo.meta.rdbmsRules.Rule)&#xA;                .map(o -> (hu.blackbelt.judo.meta.rdbmsRules.Rule) o)&#xA;                .filter(o ->&#xA;                        o.isFirst() == first&#xA;                                &amp;&amp; reference.isContainer() == o.isContainer()&#xA;                                &amp;&amp; reference.isContainment() == o.isContainment()&#xA;                                &amp;&amp; lower == o.getLower()&#xA;                                &amp;&amp; upper == o.getUpper()&#xA;                                &amp;&amp; ((!opposite.isPresent() &amp;&amp; !o.isOpposite()) || (&#xA;                                opposite.isPresent()&#xA;                                        &amp;&amp; oppositeLower == o.getOppositeLower()&#xA;                                        &amp;&amp; oppositeUpper == o.getOppositeUpper())&#xA;                        )&#xA;                ).findFirst();&#xA;&#xA;        if (!ret.isPresent()) {&#xA;            throw new RuntimeException(&quot;Could not find mapping for reference: &quot; + reference.getName()&#xA;                    + &quot; Parent: &quot; + reference.getEReferenceType().getName()&#xA;                    + &quot; (Lower: &quot; + lower&#xA;                    + &quot; Upper: &quot; + upper&#xA;                    + &quot; Opposite lower: &quot; + oppositeLower&#xA;                    + &quot; OppositeUpper: &quot; + oppositeUpper&#xA;                    + &quot; Container: &quot; + reference.isContainer()&#xA;                    + &quot; Containment: &quot; + reference.isContainment() + &quot;)&quot;);&#xA;        }&#xA;        return ret.get();&#xA;&#xA;">
        <genParameters ecoreParameter="rdbms-tablemappingrules.ecore#//Rules/getRuleFromReference/reference"/>
      </genOperations>
    </genClasses>
    <genClasses ecoreClass="rdbms-tablemappingrules.ecore#//Rule">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/symbol"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/lower"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/upper"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/opposite"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/oppositeLower"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/oppositeUpper"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/containment"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/container"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/first"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/foreignKey"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/inverseForeignKey"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/readOnly"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/cascade"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/mandatory"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/rangeConstraint"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/inverseRangeConstraint"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute rdbms-tablemappingrules.ecore#//Rule/joinTable"/>
    </genClasses>
  </genPackages>
</genmodel:GenModel>
